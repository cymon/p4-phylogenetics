This makes the fastReducedRF module, which is for fast calculation of RF distances between input trees and a supertree.  It is meant to be used by p4.stmcmc.STMcmc.py

This needs boost-python and boost dynamic-bitset.  On my mac, I installed boost and boost-python with Homebrew; for the latter be sure to specify Python 3, ie

  brew install --with-python3 boost-python

It also needs PyUblas.   Using PyUblas, we can use the p4.tree.Tree.postOrder numpy array directly in fastReducedRF.  On my mac, I had trouble installing PyUblas using pip3 because of an older PyUblas installation which left behind a file (~/.aksetup-defaults.py) that had old settings and so caused grief.  I fixed it by removing that file.  Then it built almost completely with pip3, but failed on linking because it was expecting libboost_python-py36 and my mac Homebrew lib was named libboost_python3.  My solution, on my mac, was to make symbolic links in /usr/local/lib, as

  ln -s /usr/local/Cellar/boost-python/1.66.0/lib/libboost_python3-mt.a libboost_python-py36-mt.a 
  ln -s //usr/local/Cellar/boost-python/1.66.0/lib/libboost_python3-mt.dylib libboost_python-py36-mt.dylib
  ln -s //usr/local/Cellar/boost-python/1.66.0/lib/libboost_python3.a libboost_python-py36.a
  ln -s //usr/local/Cellar/boost-python/1.66.0/lib/libboost_python3.dylib libboost_python-py36.dylib

Then pip3 built (and linked) PyUblas.

Using pip3 to install PyUblas just worked on my ubuntu 14.04.

To build the fastReducedRF module, first take a look at setup.py and make sure the paths and lib names are correct for your computer.  Then do

  python3 setup.py build_ext --inplace

and look for error messages.  If you get error messages, it probably can't find something that it needs, which might be corrected by adjusting the setup.py file.  If it works, you get fastReducedRF.so (with Python 2, or with a more complex suffix with Python 3), which you can move into your python path, eg in the p4 modules directory.

