This makes the fastReducedRF module, which is for fast calculation of RF distances between input trees and a supertree.  It is meant to be used by p4.stmcmc.STMcmc.py

This needs boost-python and boost dynamic-bitset.  On my mac, I installed boost and boost-python with Homebrew; for the latter be sure to specify Python 3, ie

  brew install boost-python3

It also needs PyUblas.   Using PyUblas, we can use the p4.tree.Tree.postOrder numpy array directly in fastReducedRF.  In previous installations on my mac, I had trouble installing PyUblas using pip3 because of an older PyUblas installation which left behind a file (~/.aksetup-defaults.py) that had old settings and so caused grief.  I fixed it by removing that file.  

Then, on my mac, it built almost completely with pip3, but failed on linking because it was expecting libboost_python-py38 and my mac Homebrew lib was named libboost_python38.  My solution, on my mac, was to make symbolic links in /usr/local/lib, as

  ln -s libboost_python38-mt.a libboost_python-py38-mt.a 
  ln -s libboost_python38-mt.dylib libboost_python-py38-mt.dylib
  ln -s libboost_python38.a libboost_python-py38.a
  ln -s libboost_python38.dylib libboost_python-py38.dylib

(not sure if all the above are needed).  Then pip3 built (and linked) PyUblas.

On ubuntu 16.04, I had to cd to /usr/local/lib and do
  ln -s libboost_python37.so libboost_python-py37.so
and then PyUblas installation worked, with
  pip3 install PyUblas

To build the fastReducedRF module, first take a look at setup.py and make sure the paths and lib names are correct for your computer.  Then do

  python3 setup.py build_ext --inplace

and look for error messages.  If you get error messages, it probably can't find something that it needs, which might be corrected by adjusting the setup.py file.  If it works, you get something like fastReducedRF.cpython-38-darwin.so, which you can move into your python path, eg in the p4 package.

